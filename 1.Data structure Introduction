Data structure:-
              1.data structure is systimatic way to orgnize the he data ,so that it can be used efficienly.
              ex-array=insted of creating number of variables of same type ,why not creating the array to store the data type.
              or
              2.data structure in way t store data element into the memory(into the main memory)in an organized manner so that the operations like addition,deletation,traversal 
              ,searching,sorting etc.
                 
                   
                                                       DATA STRUCTURE
                                                              |
                                            non-primitive----------------------------------------------------------------------primitive 
                                               |                                                                                   |
                             | -----------------------------------------------------------|                             int, char, float, double, and pointer
                         Linear                                                       Non-Linear
                   _________________                                             _____________________
                  |                 |                                           |                     |
              static             Dynamic                                      Tree                 Graph
                 |                    |    
                 1.Array             1.Linkedlist
                                     2.Stack
                                     3.Queue
                                     
 Advantages of data structure:-Efficiency:-
            1.Efficiency of a program depends upon the choice of data structures. For example: suppose, we have some data and we need to perform the search for a perticular
            record. In that case, if we organize our data in an array, we will have to search sequentially element by element. hence, using array may not be very efficient here. There are better data structures which can make the search process efficient like ordered array, binary search tree or hash tables.

            2.Reusability: Data structures are reusable, i.e. once we have implemented a particular data structure, we can use it at any other place.
            Implementation of data structures can be compiled into libraries which can be used by different clients.

            3.Abstraction: Data structure is specified by the ADT which provides a level of abstraction. The client program uses the data structure through interface only,
            without getting into the implementation details.

Data Structure Classification
           For coledge oral:-
            1.There is a need of data  structure to archive 3 things in programmeing
                    1.Efficiency
                    2.Abstraction
                    3.Reusabiliity
Need of Data Structures:-
             As applications are getting complexed and amount of data is increasing day by day, there may arrise the following problems:

             1.Processor speed: To handle very large amout of data, high speed processing is required, but as the data is growing day by day to the billions of files per entity, 
             processor may fail to deal with that much amount of data.

             2.Data Search: Consider an inventory size of 106 items in a store, If our application needs to search for a particular item, it needs to traverse 106 items every time,
             results in slowing down the search process.

             3.Multiple requests: If thousands of users are searching the data simultaneously on a web server, then there are the chances that a very large server can be failed 
             during that process

in order to solve the above problems, data structures are used. Data is organized to form a data structure in such a way that all items are not required to be searched and 
required data can be searched instantly.


Operations on data structure:-
1) Traversing: Every data structure contains the set of data elements. Traversing the data structure means visiting each element of the data structure in order to perform some
specific operation like searching or sorting.

Example: If we need to calculate the average of the marks obtained by a student in 6 different subject, we need to traverse the complete array of marks and calculate the total
sum, then we will devide that sum by the number of subjects i.e. 6, in order to find the average.

2) Insertion: Insertion can be defined as the process of adding the elements to the data structure at any location.

If the size of data structure is n then we can only insert n-1 data elements into it.

3) Deletion:The process of removing an element from the data structure is called Deletion. We can delete an element from the data structure at any random location.

If we try to delete an element from an empty data structure then underflow occurs.

4) Searching: The process of finding the location of an element within the data structure is called Searching. There are two algorithms to perform searching,
Linear Search and Binary Search. We will discuss each one of them later in this tutorial.

5) Sorting: The process of arranging the data structure in a specific order is known as Sorting. There are many algorithms that can be used to perform sorting,
for example, insertion sort, selection sort, bubble sort, etc.

6) Merging: When two lists List A and List B of size M and N respectively, of similar type of elements, clubbed or joined to produce the third list, List C of size (M+N),
then this process is called merging

